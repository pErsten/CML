@page "/"
@using System.Globalization
@using System.Net
@using System.Net.Http.Headers
@using Common
@using Common.Data.Entities
@using Common.Data.Enums
@using Common.Dtos
@using Microsoft.AspNetCore.Connections
@using Microsoft.AspNetCore.Http.Connections.Client
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.IdentityModel.Tokens
@inject IConfiguration configuration
@inject NavigationManager Navigation
@inject IJSRuntime _jsRuntime;

<PageTitle>Chart</PageTitle>

<h1>Bitcoin chart</h1>
<h1>Current rate: @btcRate</h1>

@if (!username.IsNullOrEmpty())
{
    <h3>Welcome back, @username!</h3>
    <div>
        Your fiat balance: @fiatBalance <br/>
        Your crypto balance: @cryptoBalance
    </div>
}
else
{
    <h3>Welcome to the Bitcoin chart!</h3>
    <div>to see your balances you have to log in</div>
}

<div class="d-flex flex-row">

    <MudChart ChartOptions="bidOptions" ChartType="ChartType.StackedBar" ChartSeries="@BidSeries" XAxisLabels="@BidLabels" Height="350px" />
    <MudChart ChartOptions="askOptions" ChartType="ChartType.StackedBar" ChartSeries="@AskSeries" XAxisLabels="@AskLabels" Height="350px" />
</div>
@if (!username.IsNullOrEmpty())
{
    <EditForm Model="@model" OnValidSubmit="OnBidCreate">
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Amount" @bind-Value="model.Amount" For="@(() => model.Amount)" Format="F2" Culture="@CultureInfo.InvariantCulture"/>
                    </MudCardContent>
                    <MudCardContent>
                        <MudTextField Label="Price" @bind-Value="model.Price" For="@(() => model.Price)" Format="F2" Culture="@CultureInfo.InvariantCulture" />
                    </MudCardContent>
                    <MudCardContent>
                        <MudSelect @bind-Value="model.Type" Label="Select order type" HelperText="String" Placeholder="Please Select">
                            <MudSelectItem Value="@OrderTypeEnum.Bid">Bid</MudSelectItem>
                            <MudSelectItem Value="@OrderTypeEnum.Ask">Ask</MudSelectItem>
                        </MudSelect>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create Order</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </EditForm>
    <span style="color: red">@errorMsg</span>
    <span style="color: green">@okMsg</span>
}
@code {
    private HubConnection hubConnection;
    public List<ChartSeries> BidSeries = new List<ChartSeries>();
    public string[] BidLabels = new string[] { };
    public List<ChartSeries> AskSeries = new List<ChartSeries>();
    public string[] AskLabels = new string[] { };
    private string errorMsg;
    private string okMsg;
    private decimal fiatBalance;
    private decimal cryptoBalance;
    private decimal btcRate;
    private string username;

    private CreateOrderRequest model = new CreateOrderRequest();

    ChartOptions bidOptions = new() { ChartPalette = new string[] { "green" } };
    ChartOptions askOptions = new() { ChartPalette = new string[] { "red" } };

    protected override async Task OnInitializedAsync()
    {

        string serverUrl = configuration.GetValue<string>("ServerUrl"); 
        username = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "username");

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri($"{serverUrl}/messages"), options =>
            {
                options.AccessTokenProvider = async () =>
                {
                    var token = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
                    return token;
                };
            })
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<List<BitcoinOrdersDto>, List<BitcoinOrdersDto>>("OrdersUpdate", (openBids, openAsks) =>
        {
            BidSeries = new List<ChartSeries>
                {
                    new ChartSeries { Name = "Bids", Data = openBids.Select(x => (double)x.Amount).Reverse().ToArray() }
                };
            BidLabels = openBids.Select(x => x.Price.ToString()).Reverse().ToArray();
            AskSeries = new List<ChartSeries>
                {
                    new ChartSeries { Name = "Asks", Data = openAsks.Select(x => (double)x.Amount).ToArray() }
                };
            AskLabels = openAsks.Select(x => x.Price.ToString()).ToArray();
            StateHasChanged();
        });

        hubConnection.On<AccountWalletDto>("WalletUpdate", (wallet) =>
        {
            if (wallet.Currency == Constants.FiatCurrency)
            {
                fiatBalance = wallet.Amount;
            }
            else if (wallet.Currency == Constants.CryptoCurrency)
            {
                cryptoBalance = wallet.Amount;
            }
            StateHasChanged();
        });

        hubConnection.On<decimal>("BtcRateUpdate", (rate) =>
        {
            btcRate = rate;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("ClientGetBitcoinRate");
        await hubConnection.InvokeAsync("ClientGetOrders");
        if (!string.IsNullOrEmpty(username))
        {
            await hubConnection.InvokeAsync("SubscribeToWalletUpdates");
            await hubConnection.InvokeAsync("ClientGetUserBalance");
        }

        StateHasChanged();
    }
    
    private async Task OnBidCreate(EditContext context)
    {
        errorMsg = string.Empty;
        okMsg = string.Empty;

        string serverUrl = configuration.GetValue<string>("ServerUrl");
        using var cli = new HttpClient();
        var token = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        cli.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await cli.PostAsJsonAsync($"{serverUrl}/orders/createOrder", model);
        if (response.IsSuccessStatusCode)
        {
            var text = await response.Content.ReadAsStringAsync();
            okMsg = text;
        }
        else
        {
            errorMsg = response.ReasonPhrase;
        }

        StateHasChanged();
    }

}