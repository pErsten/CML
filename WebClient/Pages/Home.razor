@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using WebClient.Components
@inject IConfiguration configuration
@inject NavigationManager Navigation
@inject IJSRuntime _jsRuntime;

<PageTitle>Chart</PageTitle>
<MudCard>
    <MudCardContent Class="d-flex gap-4">
        <div class="flex-initial">
            <MudText Typo="Typo.h4">
                BTC/EUR:
                <MudText Inline="true" Typo="Typo.h4" Color="@(isUpTrend.HasValue ? (isUpTrend.Value ? MudBlazor.Color.Success : MudBlazor.Color.Error) : MudBlazor.Color.Default)"><b>@btcRate</b></MudText>
            </MudText>
        </div>
    </MudCardContent>
</MudCard>

<h3>Welcome to the Bitcoin chart!</h3>

@if (!isLoading)
{
    <DepthChart HubConnection="hubConnection">

    </DepthChart>

    <div class="mt-2 d-flex gap-4">
        <MudGrid>
            <MudItem xs="5">
                <ExchangeCalculatorTable HubConnection="hubConnection">

                </ExchangeCalculatorTable>
            </MudItem>
            <MudItem xs="7">
                <MudCard>
                    <MudCardContent>
                        <BitcoinCandlestickGraph HubConnection="hubConnection">

                        </BitcoinCandlestickGraph>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </div>
}

@code {
    private HubConnection hubConnection;

    private decimal btcRate;
    private bool? isUpTrend;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        string serverUrl = configuration.GetValue<string>("ServerUrl");

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri($"{serverUrl}/messages"), options =>
            {
                options.AccessTokenProvider = async () =>
                {
                    var token = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
                    return token;
                };
            })
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<decimal>("BtcRateUpdate", (rate) =>
        {
            if (btcRate != 0)
            {
                isUpTrend = rate >= btcRate;
            }
            btcRate = rate;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("ClientGetBitcoinRate");

        isLoading = false;
        StateHasChanged();
    }

}