@page "/"
@using System.Net
@using Common.Data.Entities
@using Common.Dtos
@using Microsoft.AspNetCore.Connections
@using Microsoft.AspNetCore.Http.Connections.Client
@using Microsoft.AspNetCore.SignalR.Client
@inject IConfiguration configuration
@inject NavigationManager Navigation

<PageTitle>Chart</PageTitle>

<h1>Bitcoin chart</h1>
@rr

<div class="d-flex flex-row">

    <MudChart ChartOptions="bidOptions" ChartType="ChartType.StackedBar" ChartSeries="@BidSeries" XAxisLabels="@BidLabels" Height="350px" />
    <MudChart ChartOptions="askOptions" ChartType="ChartType.StackedBar" ChartSeries="@AskSeries" XAxisLabels="@AskLabels" Height="350px" />
</div>
@code {
    private HubConnection hubConnection;
    public List<ChartSeries> BidSeries = new List<ChartSeries>();
    public string[] BidLabels = new string[] { };
    public List<ChartSeries> AskSeries = new List<ChartSeries>();
    public string[] AskLabels = new string[] { };
    private string rr;
    ChartOptions bidOptions = new() { ChartPalette = new string[] { "green" } };
    ChartOptions askOptions = new() { ChartPalette = new string[] { "red" } };

    protected override async Task OnInitializedAsync()
    {

        string serverUrl = configuration.GetValue<string>("ServerUrl");
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri($"{serverUrl}/messages"))
            .WithAutomaticReconnect()
            .Build();
            
        hubConnection.On<List<BitcoinOrdersDto>, List<BitcoinOrdersDto>>("OrdersUpdate", (openBids, openAsks) =>
        {
            BidSeries = new List<ChartSeries>
                {
                    new ChartSeries { Name = "Bids", Data = openBids.Select(x => (double)x.Amount).Reverse().ToArray() }
                };
            BidLabels = openBids.Select(x => x.Price.ToString()).Reverse().ToArray();
            AskSeries = new List<ChartSeries>
                {
                    new ChartSeries { Name = "Asks", Data = openAsks.Select(x => (double)x.Amount).ToArray() }
                };
            AskLabels = openAsks.Select(x => x.Price.ToString()).ToArray();
            StateHasChanged();
        });
        
        await hubConnection.StartAsync();
        StateHasChanged();
    }

    private async Task GetBitcoinData()
    {
        string serverUrl = configuration.GetValue<string>("ServerUrl");
        using var cli = new HttpClient();
        var response = await cli.GetAsync($"{serverUrl}/home/get-bitcoin-data");

    }

}