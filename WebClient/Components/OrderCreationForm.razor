@using System.Globalization
@using System.Net.Http.Headers
@using Common.Data.Enums
@using Common.Data.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject IConfiguration configuration
@inject IJSRuntime _jsRuntime;

<EditForm Model="@model" OnValidSubmit="OnBidCreate">
    <MudGrid>
        <MudItem xs="3" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Amount" @bind-Value="model.Amount" For="@(() => model.Amount)" Format="F2" Culture="@CultureInfo.InvariantCulture"/>
                </MudCardContent>
                <MudCardContent>
                    <MudTextField Label="Price" @bind-Value="model.Price" For="@(() => model.Price)" Format="F2" Culture="@CultureInfo.InvariantCulture"/>
                </MudCardContent>
                <MudCardContent>
                    <MudSelect @bind-Value="model.Type" Label="Select order type" HelperText="String" Placeholder="Please Select">
                        <MudSelectItem Value="@OrderTypeEnum.Bid">Bid</MudSelectItem>
                        <MudSelectItem Value="@OrderTypeEnum.Ask">Ask</MudSelectItem>
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Class="ml-auto">Create Order</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>
<span style="color: red">@errorMsg</span>
<span style="color: green">@okMsg</span>


@code {
    [Parameter]
    public HubConnection HubConnection { get; set; }
    private string errorMsg;
    private string okMsg;
    private CreateOrderRequest model = new CreateOrderRequest();

    private async Task OnBidCreate(EditContext context)
    {
        errorMsg = string.Empty;
        okMsg = string.Empty;

        string serverUrl = configuration.GetValue<string>("ServerUrl");
        using var cli = new HttpClient();
        var token = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        cli.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await cli.PostAsJsonAsync($"{serverUrl}/orders/createOrder", model);
        if (response.IsSuccessStatusCode)
        {
            var text = await response.Content.ReadAsStringAsync();
            okMsg = text;
        }
        else
        {
            errorMsg = response.ReasonPhrase;
        }

        model = new();
        StateHasChanged();
    }
}
